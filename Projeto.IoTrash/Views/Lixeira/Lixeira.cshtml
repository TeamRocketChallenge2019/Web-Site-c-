
@{
    ViewData["Title"] = "Lixeira";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>IoTrash</title>
    <style>
        body {
            padding-top: 30px;
            font-family: Verdana, Arial, Helvetica, sans-serif;
            font-size: 11px;
            color: black;
            margin: 5px;
            background: #DDDDDD;
            background-size: cover;
        }

        th {
            padding: 5px;
            border-radius: 12px;
            color: #ffffff;
            background: #404040;
            border: #000000 solid 3px;
        }

        td {
            text-align: center;
            padding: 10px;
            border-radius: 10px;
            background: #666666;
            border: #000000 solid 3px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js"></script>
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script>

        /***************************************************
         * Cliente MQTT
         */

        // Variáveis para cliente MQTT
        var mqtt;
        var reconnectTimeout = 2000;
        var host = "localhost";
        var port = 51505;

        function onConnect() {
            // Conexao ao Broker
            console.log("Conectado");
            mqtt.subscribe("teste/#");
            mqtt.subscribe("iotrash/example/toggle");
            mqtt.subscribe("iotrash/example/text");
            mqtt.subscribe("iotrash/example/integer");
        }
        function onError(message) {
            // Ocorrencia de erro
            console.log("Falha: " + message.errorCode + " " + message.errorMessage);
            setTimeout(MQTTConnect, reconnectTimeout);
        }
        function onMessageArrived(msg) {
            // Mensagem recebida
            console.log("Mensagem: " + msg.destinationName + "=" + msg.payloadString);

            if (msg.destinationName == "teste/lixo") {
                // Temperatura
                dataLix.setValue(0, 1, msg.payloadString);
                chartLix.draw(dataLix, optionsLix);
            } else if (msg.destinationName == "teste/lixo") {
                // Umidade
                dataUmi.setValue(0, 1, msg.payloadString);
                chartUmi.draw(dataUmi, optionsUmi);
            } else if (msg.destinationName == "iotrash/example/integer") {
                // Inteiro
                dataInt.setValue(0, 1, msg.payloadString);
                chartInt.draw(dataInt, optionsInt);
            } else if (msg.destinationName == "iotrash/example/toggle") {
                // Toggle
                var t = document.getElementById("toggle");
                if (msg.payloadString == 1) {
                    t.innerText = "Status: Ligado";
                    t.style.background = "rgb(170, 236, 83)";
                } else {
                    t.innerText = "Status: Desligado";
                    t.style.background = "rgb(227, 0, 14)";
                }
            } else if (msg.destinationName == "iotrash/example/text") {
                // Data / Hora
                var t = new Date(msg.payloadString);
                document.getElementById("toggle").innerText = "Atualização: " + t.toLocaleDateString() + " " + t.toLocaleTimeString();
            }
        }
        function MQTTConnect() {
            // Conecta no Broker
            console.log("Conectando " + host + " " + port);
            mqtt = new Paho.MQTT.Client(host, port, "IeCJSClient" + parseInt(Math.random() * 1e5));
            var options = {
                timeout: 10,
                keepAliveInterval: 10,
                onSuccess: onConnect,
                onFailure: onError
            };
            mqtt.onMessageArrived = onMessageArrived;
            mqtt.onConnectionLost = onError;
            mqtt.connect(options);
        }

        /***************************************************
         * Gráficos
         */

        // Instancias dos gráficos
        google.charts.load('current', { 'packages': ['gauge'], 'language': 'pt-br', 'mapsApiKey': 'AIzaSyBWF8UvD9TyJSKsSCKP3PtHisRPbG4zuRA' });
        google.charts.setOnLoadCallback(drawLix);


        // Variáveis para gráficos
        var chartLix;
        var dataLix;
        var optionsLix;

        function drawLix() {
            // Desenha Umidade
            dataLix = google.visualization.arrayToDataTable([
                ['Label', 'Value'],
                ['Lixo. %', 0]
            ]);
            optionsLix = {
                min: 0, max: 100,
                majorTicks: ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100"],
                minorTicks: 2,
                redFrom: 70, redTo: 100,
                yellowFrom: 0, yellowTo: 70,
                yellowColor: "#00FF00",

            };
            chartLix = new google.visualization.Gauge(document.getElementById('lix'));
            chartLix.draw(dataLix, optionsLix);
        }


    </script>
</head>


<h2>Volume Lixeira</h2>
<body onload="MQTTConnect()">
    <table align="center">
        <tr>
            <th colspan="1">IoTrash</th>
        </tr>
        <tr>
            <td id="lix" style="width: 300px; height: 300px;"></td>
        </tr>
        <tr>
            <th id="toggle">Status:   <br>Atualização: </th>
        </tr>
    </table>
</body>
</html>

